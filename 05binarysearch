#include <stdio.h>

int binarySearch(int a[], int beg, int end, int val) {
    int mid;
    if (end >= beg) {
        mid = (beg + end) / 2;
        if (a[mid] == val)
            return mid + 1;
        else if (a[mid] < val)
            return binarySearch(a, mid + 1, end, val);
        else
            return binarySearch(a, beg, mid - 1, val);
    }
    return -1;
}

int main() {
    int n, val;
    printf("Enter number of elements (sorted): ");
    scanf("%d", &n);

    int a[n];
    printf("Enter %d sorted elements:\n", n);
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);

    printf("Enter element to search: ");
    scanf("%d", &val);

    int res = binarySearch(a, 0, n - 1, val);

    printf("The elements of the array are: ");
    for (int i = 0; i < n; i++)
        printf("%d ", a[i]);

    printf("\nElement to be searched is: %d", val);

    if (res == -1)
        printf("\nElement is not present in the array");
    else
        printf("\nElement is present at position %d", res);

    return 0;
}










Time Complexity
Best Case O(1)
Average Case O(logn)
Worst Case O(logn)






Algorithm
Binary_Search(a, lower_bound, upper_bound, val) // 'a' is the given array,
'lower_bound' is the index of the first array element, 'upper_bound' is the index of
the last array element, 'val' is the value to search
Step 1: set beg = lower_bound, end = upper_bound, pos = - 1
Step 2: repeat steps 3 and 4 while beg <=end
Step 3: set mid = (beg + end)/2
Step 4: if a[mid] = val
set pos = mid
print pos
go to step 6
else if a[mid] > val
set end = mid - 1
else
set beg = mid + 1
[end of if]
[end of loop]
Step 5: if pos = -1
print "value is not present in the array"
[end of if]
Step 6: exit
