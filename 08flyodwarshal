#include <stdio.h>

#define V 4
#define INF 99999

void printSolution(int dist[][V]) {
    printf("The following matrix shows the shortest distances between every pair of vertices\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                printf("%7s", "INF");
            else
                printf("%7d", dist[i][j]);
        }
        printf("\n");
    }
}

void floydWarshall(int dist[][V]) {
    int i, j, k;
    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
    printSolution(dist);
}

int main() {
    int graph[V][V] = {
        { 0,    5,  INF, 10 },
        { INF,  0,   3,  INF },
        { INF, INF,  0,   1 },
        { INF, INF, INF,  0 }
    };
    floydWarshall(graph);
    return 0;
}







Floyd-Warshall Algorithm (Step-by-Step Format)
Start
Input the number of vertices V and the distance matrix dist[V][V]
If there is no direct edge between vertex i and j, set dist[i][j] = ∞
Set dist[i][i] = 0 for all i
Repeat for each vertex k from 0 to V - 1
4. For each vertex i from 0 to V - 1
5. For each vertex j from 0 to V - 1
6. If dist[i][k] + dist[k][j] < dist[i][j], then update:
dist[i][j] = dist[i][k] + dist[k][j]
End of loops
Output the final distance matrix dist[i][j] — the shortest distances between all pairs of vertices
Stop
