#include <stdio.h>
#define INF 9999
#define MAX 10

void DijkstraAlgorithm(int Graph[MAX][MAX], int size, int start) {
    int cost[MAX][MAX], distance[MAX], previous[MAX];
    int visited_nodes[MAX], counter, minimum_distance, next_node, i, j;

    for (i = 0; i < size; i++)
        for (j = 0; j < size; j++)
            if (Graph[i][j] == 0)
                cost[i][j] = INF;
            else
                cost[i][j] = Graph[i][j];

    for (i = 0; i < size; i++) {
        distance[i] = cost[start][i];
        previous[i] = start;
        visited_nodes[i] = 0;
    }

    distance[start] = 0;
    visited_nodes[start] = 1;
    counter = 1;

    while (counter < size - 1) {
        minimum_distance = INF;
        for (i = 0; i < size; i++)
            if (distance[i] < minimum_distance && !visited_nodes[i]) {
                minimum_distance = distance[i];
                next_node = i;
            }

        visited_nodes[next_node] = 1;

        for (i = 0; i < size; i++)
            if (!visited_nodes[i])
                if (minimum_distance + cost[next_node][i] < distance[i]) {
                    distance[i] = minimum_distance + cost[next_node][i];
                    previous[i] = next_node;
                }
        counter++;
    }

    for (i = 0; i < size; i++)
        if (i != start)
            printf("\nDistance from the Source Node to %d: %d", i, distance[i]);
}

int main() {
    int Graph[MAX][MAX], size, source;

    size = 7;

    Graph[0][0] = 0;  Graph[0][1] = 4;  Graph[0][2] = 0;  Graph[0][3] = 0;  Graph[0][4] = 0;  Graph[0][5] = 8;  Graph[0][6] = 0;
    Graph[1][0] = 4;  Graph[1][1] = 0;  Graph[1][2] = 8;  Graph[1][3] = 0;  Graph[1][4] = 0;  Graph[1][5] = 11; Graph[1][6] = 0;
    Graph[2][0] = 0;  Graph[2][1] = 8;  Graph[2][2] = 0;  Graph[2][3] = 7;  Graph[2][4] = 0;  Graph[2][5] = 4;  Graph[2][6] = 0;
    Graph[3][0] = 0;  Graph[3][1] = 0;  Graph[3][2] = 7;  Graph[3][3] = 0;  Graph[3][4] = 9;  Graph[3][5] = 14; Graph[3][6] = 0;
    Graph[4][0] = 0;  Graph[4][1] = 0;  Graph[4][2] = 0;  Graph[4][3] = 9;  Graph[4][4] = 0;  Graph[4][5] = 10; Graph[4][6] = 2;
    Graph[5][0] = 0;  Graph[5][1] = 0;  Graph[5][2] = 4;  Graph[5][3] = 14; Graph[5][4] = 10; Graph[5][5] = 0;  Graph[5][6] = 2;
    Graph[6][0] = 0;  Graph[6][1] = 0;  Graph[6][2] = 0;  Graph[6][3] = 0;  Graph[6][4] = 2;  Graph[6][5] = 0;  Graph[6][6] = 1;

    source = 0;

    DijkstraAlgorithm(Graph, size, source);

    return 0;
}
















The following is the step that we will follow to implement Dijkstra's Algorithm:
Step 1: First, we will mark the source node with a current distance of 0 and set the rest of the
nodes to INFINITY.
Step 2: We will then set the unvisited node with the smallest current distance as the current node,
suppose X.
Step 3: For each neighbor N of the current node X: We will then add the current distance of X
with the weight of the edge joining X-N. If it is smaller than the current distance of N, set it as
the new current distance of N.
Step 4: We will then mark the current node X as visited.
Step 5: We will repeat the process from 'Step 2' if there is any node unvisited left in the graph.
